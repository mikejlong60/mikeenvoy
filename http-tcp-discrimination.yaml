admin:
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

node:
  id: local
  cluster: demo

static_resources:
  listeners:
    - name: mixed_plain_80
      address:
        socket_address: { address: 0.0.0.0, port_value: 80 }

      # Detect HTTP on plaintext connections
      listener_filters:
        - name: envoy.filters.listener.http_inspector
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector

      filter_chains:
        # -------- HTTP chain (if HTTP detected)
        - name: http_chain
          filter_chain_match:
            # http_inspector lets Envoy identify HTTP/1.x and h2c on plaintext
            application_protocols: ["http/1.1", "http/1.0", "h2c"]
          filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                route_config:
                  name: local
                  virtual_hosts:
                    - name: all
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/" }
                          route: { cluster: http_backend }
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

        # -------- Fallback TCP chain (non-HTTP traffic)
        - name: tcp_chain
          # No match â†’ default chain
          filters:
            - name: envoy.filters.network.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: tcp_passthrough
                cluster: tcp_backend

  clusters:
    - name: http_backend
      type: STRICT_DNS
      connect_timeout: 1s
      load_assignment:
        cluster_name: http_backend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: http-app, port_value: 8080 }

    - name: tcp_backend
      type: STRICT_DNS
      connect_timeout: 1s
      load_assignment:
        cluster_name: tcp_backend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: tcp-service, port_value: 9000 }
